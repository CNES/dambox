.\" Manpage for run_bh.
.\" Contact cormiere@silicom.fr to correct errors or typos.
.TH man 1 "01 May 2019" "1.0" "BeamHopping man page"
.SH NAME
run_bh \- enable beam hopping on the machine 
.SH SYNOPSIS

.B run_bh [\fB -bs \fR \fIbeamslot\fR\fB] [\fB -f \fR \fIfrequency\fR\fB] [\fR\fIoption\fR\fB]
.PP
.B run_bh [\fB -bs \fR \fIbeamslot\fR\fB] [\fB --timeline \fR \fIfile\fR\fB] [\fR\fIoption\fR\fB]

.SH DESCRIPTION

The BH box is software developed in C++ that aims to simulate the implementation of the BH (Beam-Hopping) on a satellite telecommunications system. The aim is to study a single-beam communication and to add a temporal intermittency on the communication. It uses netfilter to intercept incoming packets in order to send them only when the recipient’s beam is illuminated by the satellite.

The BH box therefore represents a solution to study the impact of the implementation of beam-hopping on certain network perspectives and performances (QoS, QoE, etc).

.PP The BH Box is a multilayer filter. It operates at the network level and then at the application level.

At the network level, the BH box uses netfilter to handle incoming packets which have to be concerned by the beam-hopping. Netfilter then allows these packets to be redirected to a local socket instead of being routed to the end user.

At the application level, the binary run_bh retrieves packets arriving on the socket. Then, it adds them to a FIFO pipe. It will then unpack the packets and re-send them according to the lighting profile of the recipient defined in the parameter.

.SH MANDATORY OPTIONS
.TP
.B [\fB -bs \fR \fIbeamslot\fR\fB] [\fB -f \fR \fIfrequency\fR\fB] [\fR\fIoption\fR\fB]
Set the duration in us (microsecond) of a beam slot
.TP
.B -f, --frequency \fB \fIfreq\fR
Set the beam ilumination frequency. If freq = 4, the beam is activated 1 time-slot out of 4
.TP
.B -t, --timeline \fB \fIfile_path\fR
Configuration file to define a custom timeline of beam-hopping. Replace the usage of -f, the file must only contain 0 and 1 on his first line.0 will indicate a beamslot OFF and 1 a beamslot ON, example of a custom timeline 0010100011110.
 
.SH GENERAL OPTIONS
.TP
.B -d, --duration \fB \fIduration\fR
Set the duration of execution of the beam hopping since the first packet received, if not use the beam hopping will run continuously until a system interruption (ctrl+c, ctrl+z, ctrl+\\)
.TP
.B --debug
Emit debugging output during execution. Save the evolution of timeline and fifo filling over time in file profil_fifo.txt and profil_bh.txt at the end of the execution(option strongly recommanded). 
.TP
.B -s, --simultaneous \fB \fIpacket\fR
Set the maximum number of packets that can be sent out the BH box simultaneously (by default 1).Increasing this paramater will increase the performance of the binary in case of a bottleneck
.TP
.B -h, --help
Show help synopsis
.TP
.B -v, --version
Show version information and quit

.SH EXAMPLES
.TP
.B run_bh \fB -bs \fR \fI13000\fR\fB -f\fR \fI2\fR\fB
The beam hopping will run until a system interuption, the beamslot is 13 ms(millisecond) and the beam will be active each 2 beamslots( 26us in our exemple)
.TP
.B run_bh \fB -bs \fR\fI13000\fR\fB  \fB-f \fR\fI10\fR\fB \fB--debug \fB-s \fR\fI10\fR\fB \fB-d\fR \fI30\fR\fB
The beam hopping  will run during  30s after the first packet received, the debug is ON and it will compute 10 by 10 packet.The beam slot is 13 ms(millisecond) and the beam will be active each 10 beamslots(each 100us in our example).
.TP
.B run_bh \fB -bs \fR\fI15000\fR\fB  \fB--timeline \fR\fItimeline.txt\fR\fB \fB--debug \fB-s \fR\fI20\fR\fB \fB-d\fR \fI60\fR\fB
The  beam hopping  will run during  60s after the first packet received, the debug is ON and the binary will compute 20 by 20 packets. The beam slot is 15 ms(millisecond). The timeline for the illumination beam will be a custom timeline written in the file timeline.txt ( example 0100011101001)
.SH BUGS
No known bugs.
.SH AUTHOR
Clément RUCEL (crucel@silicom.fr), Benoit GAILLAC (bgaillac@silicom.fr), Corentin ORMIERE (cormiere@silicom.fr)


